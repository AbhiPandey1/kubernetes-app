{"version":3,"sources":["../../../src/components/clusters/clusterInfo.js"],"names":["slugify","str","slug","replace","_","$","ClusterInfoCtrl","$scope","$injector","backendSrv","$q","$location","alertSrv","self","pageReady","cluster","componentStatuses","namespaces","namespace","nodes","daemonSets","replicationControllers","deployments","pods","search","set","getCluster","then","getWorkloads","getComponentStatuses","stats","items","getNamespaces","ns","getNodes","getDaemonSets","ds","getReplicationControllers","rc","getDeployments","deploy","getPods","pod","id","get","request","url","method","headers","component","health","forEach","conditions","condition","type","status","node","evt","clickTargetIsLinkOrHasLinkParents","target","closest","length","path","jsonData","name","metadata","prefix","resource","getResource","templateUrl"],"mappings":"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","file":"clusterInfo.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(\".\", \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n\nexport class ClusterInfoCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, $q, $location, alertSrv) {\n    var self = this;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.$location = $location;\n    this.pageReady = false;\n    this.cluster = {};\n    this.componentStatuses = [];\n    this.namespaces = [];\n    this.namespace = \"\";\n    this.nodes = [];\n    this.daemonSets = [];\n    this.replicationControllers = [];\n    this.deployments = [];\n    this.pods = [];\n    if (!(\"cluster\" in $location.search())) {\n      alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    }\n\n    self.getCluster($location.search().cluster)\n    .then(() => {\n      self.pageReady = true;\n      self.getWorkloads();\n    });\n  }\n\n  getWorkloads() {\n    var self = this;\n    this.getComponentStatuses().then(stats => {\n      self.componentStatuses = stats.items;\n    });\n    this.getNamespaces().then(ns => {\n      self.namespaces = ns.items;\n    });\n    this.getNodes().then(nodes => {\n      self.nodes = nodes.items;\n    });\n    this.getDaemonSets().then(ds => {\n      self.daemonSets = ds.items;\n    });\n    this.getReplicationControllers().then(rc => {\n      self.replicationControllers = rc.items;\n    });\n    this.getDeployments().then(deploy => {\n      self.deployments = deploy.items;\n    });\n    this.getPods().then(pod => {\n      self.pods = pod.items;\n    });\n  }\n\n  getCluster(id) {\n    var self = this;\n    return this.backendSrv.get('api/datasources/'+id)\n    .then((ds) => {\n      self.cluster = ds;\n    });\n  }\n\n  getComponentStatuses() {\n    var self = this;\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id + '/api/v1/componentstatuses',\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  componentHealth(component) {\n    var health = \"unhealthy\";\n    _.forEach(component.conditions, function(condition) {\n      if ((condition.type === \"Healthy\") && (condition.status === \"True\")) {\n        health = \"healthy\";\n      }\n    });\n    return health;\n  }\n\n  getNamespaces() {\n    var self = this;\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id + '/api/v1/namespaces',\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  getNodes() {\n    var self = this;\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id + '/api/v1/nodes',\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  nodeStatus(node) {\n    var health = \"unhealthy\";\n    _.forEach(node.status.conditions, function(condition) {\n      if ((condition.type === \"Ready\") && (condition.status === \"True\")) {\n        health = \"healthy\";\n      }\n    });\n    return health;\n  }\n\n  nodeDashboard(node, evt) {\n    var clickTargetIsLinkOrHasLinkParents = $(evt.target).closest('a').length > 0;\n    if (clickTargetIsLinkOrHasLinkParents === false) {\n      this.$location.path(\"dashboard/db/kubernetes-node\")\n      .search({\n        \"var-datasource\": this.cluster.jsonData.ds,\n        \"var-cluster\": this.cluster.name,\n        \"var-node\": slugify(node.metadata.name)\n      });\n    }\n  }\n\n  getResource(prefix, resource) {\n    var self = this;\n    if (this.namespace) {\n      resource = \"namespaces/\"+this.namespace+\"/\"+resource;\n    }\n\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id + prefix + resource,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  getDaemonSets() {\n    return this.getResource(\"/apis/extensions/v1beta1/\", \"daemonsets\");\n  }\n\n  getReplicationControllers() {\n    return this.getResource(\"/api/v1/\", \"replicationcontrollers\");\n  }\n\n  getDeployments() {\n    return this.getResource(\"/apis/extensions/v1beta1/\", \"deployments\");\n  }\n\n  getPods() {\n    return this.getResource(\"/api/v1/\", \"pods\");\n  }\n}\n\nClusterInfoCtrl.templateUrl = 'components/clusters/cluster_info.html';"]}