{"version":3,"sources":["../../../src/components/clusters/clusterWorkloads.js"],"names":["slugify","str","slug","replace","extractContainerID","dockerIDPattern","exec","_","$","ClusterWorkloadsCtrl","$scope","$injector","backendSrv","datasourceSrv","$q","$location","alertSrv","pageReady","cluster","namespaces","namespace","daemonSets","replicationControllers","deployments","pods","search","set","getCluster","then","clusterDS","getWorkloads","id","get","ds","name","getNamespaces","getDaemonSets","getReplicationControllers","rc","getDeployments","getPods","component","health","forEach","conditions","condition","type","status","componentHealth","pod","evt","clickTargetIsLinkOrHasLinkParents","target","closest","length","containerIDs","map","containerStatuses","containerID","path","jsonData","spec","nodeName","closestElm","head","clickTargetClickAttr","find","attributes","clickTargetIsNodeDashboard","value","metadata","templateUrl"],"mappings":"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","file":"clusterWorkloads.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(\".\", \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n\nfunction extractContainerID(str) {\n  var dockerIDPattern = /docker\\:\\/\\/(.{12})/;\n  return dockerIDPattern.exec(str)[1];\n}\n\nexport class ClusterWorkloadsCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, datasourceSrv, $q, $location, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n\n    this.pageReady = false;\n    this.cluster = {};\n    this.namespaces = [];\n    this.namespace = \"\";\n    this.daemonSets = [];\n    this.replicationControllers = [];\n    this.deployments = [];\n    this.pods = [];\n\n    if (!(\"cluster\" in $location.search())) {\n      alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    }\n\n    if (\"namespace\" in $location.search()) {\n      this.namespace = $location.search().namespace;\n    }\n\n    this.getCluster($location.search().cluster)\n      .then(clusterDS => {\n        this.clusterDS = clusterDS;\n        this.pageReady = true;\n        this.getWorkloads();\n      });\n  }\n\n  getCluster(id) {\n    return this.backendSrv.get('api/datasources/'+id).then(ds => {\n      this.cluster = ds;\n      return this.datasourceSrv.get(ds.name);\n    });\n  }\n\n  getWorkloads() {\n    let namespace = this.namespace;\n    this.clusterDS.getNamespaces().then(namespaces => {\n      this.namespaces = namespaces;\n    });\n    this.clusterDS.getDaemonSets(namespace).then(daemonSets => {\n      this.daemonSets = daemonSets;\n    });\n    this.clusterDS.getReplicationControllers(namespace).then(rc => {\n      this.replicationControllers = rc;\n    });\n    this.clusterDS.getDeployments(namespace).then(deployments => {\n      this.deployments = deployments;\n    });\n    this.clusterDS.getPods(namespace).then(pods => {\n      this.pods = pods;\n    });\n  }\n\n  componentHealth(component) {\n    var health = \"unhealthy\";\n    _.forEach(component.conditions, function(condition) {\n      if ((condition.type === \"Healthy\") && (condition.status === \"True\")) {\n        health = \"healthy\";\n      }\n    });\n    return health;\n  }\n\n  isComponentHealthy(component) {\n    return this.componentHealth(component) === \"healthy\";\n  }\n\n  goToPodDashboard(pod, evt) {\n    var clickTargetIsLinkOrHasLinkParents = $(evt.target).closest('a').length > 0;\n    if (clickTargetIsLinkOrHasLinkParents === false) {\n      var containerIDs = _.map(pod.status.containerStatuses, (status) => {\n        return extractContainerID(status.containerID);\n      });\n      this.$location.path(\"dashboard/db/kubernetes-container\")\n      .search({\n        \"var-datasource\": this.cluster.jsonData.ds,\n        \"var-cluster\": this.cluster.name,\n        \"var-node\": slugify(pod.spec.nodeName),\n        \"var-container\": containerIDs\n      });\n    }\n  }\n\n  goToPodInfo(pod, evt) {\n    var clickTargetIsLinkOrHasLinkParents = $(evt.target).closest('a').length > 0;\n\n    var closestElm = _.head($(evt.target).closest('div'));\n    var clickTargetClickAttr = _.find(closestElm.attributes, {name: \"ng-click\"});\n    var clickTargetIsNodeDashboard = clickTargetClickAttr ? clickTargetClickAttr.value === \"ctrl.goToPodDashboard(pod, $event)\" : false;\n    if (clickTargetIsLinkOrHasLinkParents === false &&\n        clickTargetIsNodeDashboard === false) {\n      this.$location.path(\"plugins/raintank-kubernetes-app/page/pod-info\")\n      .search({\n        \"cluster\": this.cluster.id,\n        \"namespace\": slugify(pod.metadata.namespace),\n        \"pod\": pod.metadata.name\n      });\n    }\n  }\n}\n\nClusterWorkloadsCtrl.templateUrl = 'components/clusters/partials/cluster_workloads.html';\n"]}