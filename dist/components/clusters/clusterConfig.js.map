{"version":3,"sources":["../../../src/components/clusters/clusterConfig.js"],"names":["slugify","str","slug","replace","_","appEvents","ClusterConfigCtrl","$scope","$injector","backendSrv","$q","contextSrv","$location","$window","alertSrv","self","isOrgEditor","hasRole","cluster","type","pageReady","snapDeployed","getDatasources","then","promises","search","push","getCluster","getDaemonSets","forEach","ds","items","daemonSet","metadata","name","getGraphiteDatasources","all","id","get","jsonData","result","datasources","filter","request","url","method","headers","saveDatasource","set","catch","err","question","emit","title","text","yesText","icon","onConfirm","saveAndDeploy","undeploySnap","put","post","deploySnap","task","cloneDeep","snapTask","workflow","collect","publish","config","prefix","port","server","cm","configMap","data","JSON","stringify","createConfigMap","createDaemonSet","updateSnapSettings","deleteConfigMap","deleteDaemonSet","clusterId","pods","length","pod","history","back","templateUrl"],"mappings":"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","file":"clusterConfig.js","sourcesContent":["import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(\".\", \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n\nexport class ClusterConfigCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, $q, contextSrv, $location, $window, alertSrv) {\n    var self = this;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.isOrgEditor = contextSrv.hasRole('Editor') || contextSrv.hasRole('Admin');\n    this.$window = $window;\n    this.$location = $location;\n    this.cluster = {type: 'raintank-kubernetes-datasource'};\n    this.pageReady = false;\n    this.snapDeployed = false;\n    this.alertSrv = alertSrv;\n\n    this.getDatasources().then(() => {\n      self.pageReady = true;\n    });\n  }\n\n  getDatasources() {\n    var self = this;\n    var promises = [];\n    if (\"cluster\" in self.$location.search()) {\n      promises.push(self.getCluster(this.$location.search().cluster).then(() => {\n        return self.getDaemonSets().then(ds => {\n          _.forEach(ds.items, function(daemonSet) {\n            if (daemonSet.metadata.name === \"snap\") {\n              self.snapDeployed = true;\n            }\n          });\n        });\n      }));\n    }\n\n    promises.push(self.getGraphiteDatasources());\n\n    return this.$q.all(promises);\n  }\n\n  getCluster(id) {\n    var self = this;\n    return this.backendSrv.get('/api/datasources/'+id)\n    .then((ds) => {\n      if (!(ds.jsonData.ds)) {\n        ds.jsonData.ds = \"\";\n      }\n      self.cluster = ds;\n    });\n  }\n\n  getGraphiteDatasources() {\n    var self = this;\n    return this.backendSrv.get('/api/datasources')\n    .then((result) => {\n      self.datasources = _.filter(result, {\"type\": \"graphite\"});\n    });\n  }\n\n  getDaemonSets() {\n    var self = this;\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id + '/apis/extensions/v1beta1/daemonsets',\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  save() {\n    return this.saveDatasource()\n      .then(() => {\n        return this.getDatasources();\n      })\n      .then(() => {\n        this.alertSrv.set(\"Saved\", \"Saved and successfully connected to \" + this.cluster.name, 'success', 3000);\n      })\n      .catch(err => {\n        this.alertSrv.set(\"Saved\", \"Saved but failed to connect to \" + this.cluster.name + '. Error: ' + err, 'error', 5000);\n      });\n  }\n\n  deploy() {\n    var question = !this.snapDeployed ?\n      'This action will deploy a DaemonSet to your Kubernetes cluster. It uses Intel Snap to collect health metrics. '\n      + 'Are you sure you want to deploy?'\n      : 'This action will update the Config Map for the Snap DaemonSet and recreate the snapd pod on your Kubernetes cluster. '\n      + 'Are you sure you want to deploy?';\n    appEvents.emit('confirm-modal', {\n      title: 'Deploy to Kubernetes Cluster',\n      text: question,\n      yesText: \"Deploy\",\n      icon: \"fa-question\",\n      onConfirm: () => {\n        this.saveAndDeploy();\n      }\n    });\n  }\n\n  undeploy() {\n    var question = 'This action will remove the DaemonSet on your Kubernetes cluster that collects health metrics. '\n      + 'Are you sure you want to remove it?';\n\n    appEvents.emit('confirm-modal', {\n      title: 'Remove Daemonset Collector',\n      text: question,\n      yesText: \"Remove\",\n      icon: \"fa-question\",\n      onConfirm: () => {\n        this.undeploySnap();\n      }\n    });\n  }\n\n  saveDatasource() {\n    if (this.cluster.id) {\n      return this.backendSrv.put('/api/datasources/' + this.cluster.id, this.cluster);\n    } else {\n      return this.backendSrv.post('/api/datasources', this.cluster);\n    }\n  }\n\n  saveAndDeploy() {\n    return this.saveDatasource()\n      .then(() => {\n        return this.deploySnap();\n      });\n  }\n\n  deploySnap() {\n    if(!this.cluster || !this.cluster.id) {\n      this.alertSrv.set(\"Error\", \"Could not connect to cluster.\", 'error');\n      return;\n    }\n\n    var self = this;\n    var task = _.cloneDeep(snapTask);\n    task.workflow.collect.publish[0].config.prefix = \"snap.\"+slugify(self.cluster.name) + \".<%NODE%>\";\n    task.workflow.collect.publish[0].config.port = self.cluster.jsonData.port;\n    task.workflow.collect.publish[0].config.server = self.cluster.jsonData.server;\n    var cm = _.cloneDeep(configMap);\n    cm.data[\"core.json\"] = JSON.stringify(task);\n\n    if (!this.snapDeployed) {\n      return this.createConfigMap(self.cluster.id, cm)\n      .then(() => {\n        return this.createDaemonSet(self.cluster.id, daemonSet);\n      })\n      .catch(err => {\n        this.alertSrv.set(\"Error\", err, 'error');\n      }).then(() => {\n        this.snapDeployed = true;\n        this.alertSrv.set(\"Deployed\", \"Snap DaemonSet for Kubernetes metrics deployed to \" + self.cluster.name, 'success', 5000);\n      });\n    } else {\n      return self.updateSnapSettings(cm);\n    }\n  }\n\n  undeploySnap() {\n    var self = this;\n    return this.deleteConfigMap(self.cluster.id)\n      .then(() => {\n        return this.deleteDaemonSet(self.cluster.id);\n      })\n      .then(() => {\n        this.snapDeployed = false;\n      });\n  }\n\n  createConfigMap(clusterId, cm) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/api/v1/namespaces/kube-system/configmaps',\n      method: 'POST',\n      data: cm,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  createDaemonSet(clusterId, daemonSet) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/extensions/v1beta1/namespaces/kube-system/daemonsets',\n      method: 'POST',\n      data: daemonSet,\n      headers: {'Content-Type': \"application/json\"}\n    });\n  }\n\n  deleteDaemonSet(clusterId) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/extensions/v1beta1/namespaces/kube-system/daemonsets/snap',\n      method: 'DELETE',\n    });\n  }\n\n  deleteConfigMap(clusterId) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/api/v1/namespaces/kube-system/configmaps/snap-tasks',\n      method: 'DELETE'\n    });\n  }\n\n  updateSnapSettings(cm) {\n    var self = this;\n    return this.deleteConfigMap(self.cluster.id)\n    .then(() => {\n      return this.createConfigMap(self.cluster.id, cm);\n    }).then(() => {\n      return this.backendSrv.request({\n        url: 'api/datasources/proxy/' + self.cluster.id + '/api/v1/namespaces/kube-system/pods?labelSelector=daemon%3Dsnapd',\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }).then(pods => {\n      if (!pods || pods.items.length === 0) {\n        throw \"Failed to restart snap pod. No snapd pod found to update.\";\n      }\n\n      var promises = [];\n\n      _.forEach(pods.items, pod => {\n        promises.push(this.backendSrv.request({\n          url: 'api/datasources/proxy/' + self.cluster.id + '/api/v1/namespaces/kube-system/pods/' + pod.metadata.name,\n          method: 'DELETE',\n        }));\n      });\n\n      return this.$q.all(promises);\n    }).catch(err => {\n      this.alertSrv.set(\"Error\", err, 'error');\n    }).then(() => {\n      this.alertSrv.set(\"Updated\", \"Graphite Settings in Config Map on \" + self.cluster.name + \" updated successfully\", 'success', 3000);\n    });\n  }\n\n  cancel() {\n    this.$window.history.back();\n  }\n\n}\n\nClusterConfigCtrl.templateUrl = 'components/clusters/partials/cluster_config.html';\n\nvar configMap = {\n  \"kind\": \"ConfigMap\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n    \"name\": \"snap-tasks\",\n    \"namespace\": \"kube-system\"\n  },\n  \"data\": {\n    \"core.json\": \"\"\n  }\n};\n\nvar snapTask = {\n  \"version\": 1,\n  \"schedule\": {\n    \"type\": \"simple\",\n    \"interval\": \"10s\"\n  },\n  \"workflow\": {\n    \"collect\": {\n      \"metrics\": {\n        \"/intel/docker/*\":{},\n        \"/intel/procfs/cpu/*\": {},\n        \"/intel/procfs/meminfo/*\": {},\n        \"/intel/procfs/iface/*\": {},\n        \"/intel/linux/iostat/*\": {},\n        \"/intel/procfs/load/*\": {}\n      },\n      \"config\": {\n        \"/intel/procfs\": {\n          \"proc_path\": \"/proc_host\"\n        }\n      },\n      \"process\": null,\n      \"publish\": [\n        {\n          \"plugin_name\": \"graphite\",\n          \"config\": {\n            \"prefix\": \"\",\n            \"server\": \"\",\n            \"port\": 2003\n          }\n        }\n      ]\n    }\n  }\n};\n\nvar daemonSet = {\n  \"kind\": \"DaemonSet\",\n  \"apiVersion\": \"extensions/v1beta1\",\n  \"metadata\": {\n    \"name\": \"snap\",\n    \"namespace\": \"kube-system\",\n    \"labels\": {\n      \"daemon\": \"snapd\"\n    }\n  },\n  \"spec\": {\n    \"selector\": {\n      \"matchLabels\": {\n        \"daemon\": \"snapd\"\n      }\n    },\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"snap\",\n        \"labels\": {\n          \"daemon\": \"snapd\"\n        }\n      },\n      \"spec\": {\n        \"volumes\": [\n          {\n            \"name\": \"dev\",\n            \"hostPath\": {\n              \"path\": \"/dev\"\n            }\n          },\n          {\n            \"name\": \"cgroup\",\n            \"hostPath\": {\n              \"path\": \"/sys/fs/cgroup\"\n            }\n          },\n          {\n            \"name\": \"docker-sock\",\n            \"hostPath\": {\n              \"path\": \"/var/run/docker.sock\"\n            }\n          },\n          {\n            \"name\": \"fs-stats\",\n            \"hostPath\": {\n              \"path\": \"/var/lib/docker\"\n            }\n          },\n          {\n            \"name\": \"docker\",\n            \"hostPath\": {\n              \"path\": \"/usr/bin/docker\"\n            }\n          },\n          {\n            \"name\": \"proc\",\n            \"hostPath\": {\n              \"path\": \"/proc\"\n            }\n          },\n          {\n            \"name\": \"snap-tasks\",\n            \"configMap\": {\n              \"name\": \"snap-tasks\"\n            }\n          }\n        ],\n        \"containers\": [\n          {\n            \"name\": \"snap\",\n            \"image\": \"raintank/snap_k8s:v11\",\n            \"ports\": [\n              {\n                \"name\": \"snap-api\",\n                \"hostPort\": 8181,\n                \"containerPort\": 8181,\n                \"protocol\": \"TCP\"\n              }\n            ],\n            \"env\": [\n              {\n                \"name\": \"PROCFS_MOUNT\",\n                \"value\": \"/proc_host\"\n              },\n              {\n                \"name\": \"NODE_NAME\",\n                \"valueFrom\": {\n                  \"fieldRef\": {\n                    \"fieldPath\": \"spec.nodeName\"\n                  }\n                }\n              }\n            ],\n            \"resources\": {},\n            \"volumeMounts\": [\n              {\n                \"name\": \"cgroup\",\n                \"mountPath\": \"/sys/fs/cgroup\"\n              },\n              {\n                \"name\": \"docker-sock\",\n                \"mountPath\": \"/var/run/docker.sock\"\n              },\n              {\n                \"name\": \"fs-stats\",\n                \"mountPath\": \"/var/lib/docker\"\n              },\n              {\n                \"name\": \"docker\",\n                \"mountPath\": \"/usr/local/bin/docker\"\n              },\n              {\n                \"name\": \"proc\",\n                \"mountPath\": \"/proc_host\"\n              },\n              {\n                \"name\": \"snap-tasks\",\n                \"mountPath\": \"/opt/snap/tasks\"\n              }\n            ],\n            \"imagePullPolicy\": \"IfNotPresent\",\n            \"securityContext\": {\n              \"privileged\": true\n            }\n          }\n        ],\n        \"restartPolicy\": \"Always\",\n        \"hostNetwork\": true,\n        \"hostPID\": true\n      }\n    }\n  }\n};\n"]}