{"version":3,"sources":["../../../src/components/clusters/nodeInfo.js"],"names":["moment","NodeInfoCtrl","$scope","$injector","backendSrv","datasourceSrv","$q","$location","alertSrv","pageReady","clusterDS","node","search","set","cluster_id","cluster","node_name","loadDatasource","then","getNode","id","get","ds","name","condition","status","type","value","text","conditionStatus","lastTransitionTime","format","templateUrl"],"mappings":";;;;;;;;;;;;;;;AAAOA,Y;;;;;;;;;;;;;;;;;;;;;8BAEMC,Y;AACX;AACA,8BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,aAA3C,EAA0DC,EAA1D,EAA8DC,SAA9D,EAAyEC,QAAzE,EAAmF;AAAA;;AAAA;;AACjF,eAAKF,EAAL,GAAUA,EAAV;AACA,eAAKF,UAAL,GAAkBA,UAAlB;AACA,eAAKC,aAAL,GAAqBA,aAArB;AACA,eAAKE,SAAL,GAAiBA,SAAjB;;AAEA,eAAKE,SAAL,GAAiB,KAAjB;AACA,eAAKC,SAAL,GAAiB,EAAjB;AACA,eAAKC,IAAL,GAAY,EAAZ;;AAEA,cAAI,EAAE,aAAaJ,UAAUK,MAAV,EAAf,CAAJ,EAAwC;AACtCJ,qBAASK,GAAT,CAAa,uBAAb,EAAsC,6BAAtC,EAAqE,OAArE;AACA;AACD,WAHD,MAGO;AAAA;AACL,oBAAKC,UAAL,GAAkBP,UAAUK,MAAV,GAAmBG,OAArC;AACA,kBAAIC,YAAcT,UAAUK,MAAV,GAAmBD,IAArC;;AAEA,oBAAKM,cAAL,CAAoB,MAAKH,UAAzB,EAAqCI,IAArC,CAA0C,YAAM;AAC9C,sBAAKR,SAAL,CAAeS,OAAf,CAAuBH,SAAvB,EAAkCE,IAAlC,CAAuC,gBAAQ;AAC7C,wBAAKP,IAAL,GAAYA,IAAZ;AACA,wBAAKF,SAAL,GAAiB,IAAjB;AACD,iBAHD;AAID,eALD;AAJK;AAUN;AACF;;;;yCAEcW,E,EAAI;AAAA;;AACjB,mBAAO,KAAKhB,UAAL,CAAgBiB,GAAhB,CAAoB,qBAAqBD,EAAzC,EACJF,IADI,CACC,cAAM;AACV,qBAAO,OAAKb,aAAL,CAAmBgB,GAAnB,CAAuBC,GAAGC,IAA1B,CAAP;AACD,aAHI,EAGFL,IAHE,CAGG,qBAAa;AACnB,qBAAKR,SAAL,GAAiBA,SAAjB;AACA,qBAAOA,SAAP;AACD,aANI,CAAP;AAOD;;;0CAEec,S,EAAW;AACzB,gBAAIC,MAAJ;AACA,gBAAID,UAAUE,IAAV,KAAmB,OAAvB,EAAgC;AAC9BD,uBAASD,UAAUC,MAAV,KAAqB,MAA9B;AACD,aAFD,MAEO;AACLA,uBAASD,UAAUC,MAAV,KAAqB,OAA9B;AACD;;AAED,mBAAO;AACLE,qBAAOF,MADF;AAELG,oBAAMH,SAAS,IAAT,GAAgB;AAFjB,aAAP;AAID;;;wCAEaD,S,EAAW;AACvB,mBAAO,KAAKK,eAAL,CAAqBL,SAArB,EAAgCG,KAAvC;AACD;;;sDAE2BH,S,EAAW;AACrC,mBAAOxB,OAAOwB,UAAUM,kBAAjB,EAAqCC,MAArC,CAA4C,qBAA5C,CAAP;AACD;;;;;;;;AAGH9B,mBAAa+B,WAAb,GAA2B,6CAA3B","file":"nodeInfo.js","sourcesContent":["import moment from 'moment';\n\nexport class NodeInfoCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, datasourceSrv, $q, $location, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n\n    this.pageReady = false;\n    this.clusterDS = {};\n    this.node = {};\n\n    if (!(\"cluster\" in $location.search())) {\n      alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    } else {\n      this.cluster_id = $location.search().cluster;\n      let node_name   = $location.search().node;\n\n      this.loadDatasource(this.cluster_id).then(() => {\n        this.clusterDS.getNode(node_name).then(node => {\n          this.node = node;\n          this.pageReady = true;\n        });\n      });\n    }\n  }\n\n  loadDatasource(id) {\n    return this.backendSrv.get('api/datasources/' + id)\n      .then(ds => {\n        return this.datasourceSrv.get(ds.name);\n      }).then(clusterDS => {\n        this.clusterDS = clusterDS;\n        return clusterDS;\n      });\n  }\n\n  conditionStatus(condition) {\n    var status;\n    if (condition.type === \"Ready\") {\n      status = condition.status === \"True\";\n    } else {\n      status = condition.status === \"False\";\n    }\n\n    return {\n      value: status,\n      text: status ? \"Ok\" : \"Error\"\n    };\n  }\n\n  isConditionOk(condition) {\n    return this.conditionStatus(condition).value;\n  }\n\n  conditionLastTransitionTime(condition) {\n    return moment(condition.lastTransitionTime).format('YYYY-MM-DD HH:mm:ss');\n  }\n}\n\nNodeInfoCtrl.templateUrl = 'components/clusters/partials/node_info.html';\n"]}