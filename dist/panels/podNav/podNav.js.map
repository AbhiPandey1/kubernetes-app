{"version":3,"sources":["../../../src/panels/podNav/podNav.js"],"names":["PanelCtrl","_","panelDefaults","PodNavCtrl","$scope","$injector","backendSrv","datasourceSrv","$location","alertSrv","variableSrv","$q","defaults","panel","templateVariables","variables","namespace","currentTags","currentPods","selectedPods","setDefaults","loadTags","chosenTags","getCluster","then","getPods","parseTagsFromPods","pods","uniq","map","p","metadata","name","search","set","ns","find","current","value","podVariable","isArray","length","promises","forEach","push","clusterDS","all","flatten","filter","n","getPodsByName","pod","labels","label","includes","removeEmptyTags","getPodsByLabel","updateTemplateVariableWithPods","variable","text","join","isEmpty","updateOptions","variableUpdated","$emit","$root","$broadcast","omitBy","val","clusterName","get","result","ds","jsonData","tag","podName","remove","templateUrl"],"mappings":"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","file":"podNav.js","sourcesContent":["import {PanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nconst panelDefaults = {\n};\n\nexport class PodNavCtrl extends PanelCtrl {\n  constructor($scope, $injector, backendSrv, datasourceSrv, $location, alertSrv, variableSrv, $q) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n    this.alertSrv = alertSrv;\n    this.variableSrv = variableSrv;\n    this.$q = $q;\n\n    this.templateVariables = this.variableSrv.variables;\n    this.namespace = \"All\";\n    this.currentTags = {};\n    this.currentPods = [];\n    this.selectedPods = [];\n\n    this.setDefaults();\n    this.loadTags();\n    this.chosenTags = {};\n  }\n\n  loadTags() {\n    this.getCluster().then(() => {\n      return this.getPods().then(pods => {\n        this.parseTagsFromPods(pods);\n        this.currentPods = _.uniq(_.map(pods, p => { return p.metadata.name; }));\n      });\n    });\n  }\n\n  setDefaults() {\n    if (!(\"var-cluster\" in this.$location.search())) {\n      this.alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    }\n\n    const ns = _.find(this.templateVariables, {'name': 'namespace'});\n    this.namespace = ns.current.value !== '$__all' ? ns.current.value : '';\n    const podVariable = _.find(this.templateVariables, {'name': 'pod'});\n\n    if (podVariable.current.value !== '$__all') {\n      this.selectedPods = _.isArray(podVariable.current.value) ? podVariable.current.value : [podVariable.current.value];\n    }\n  }\n\n  getPods() {\n    if (this.currentPods.length === 0) {\n      if (_.isArray(this.namespace)) {\n        const promises = [];\n        _.forEach(this.namespace, ns => {\n          promises.push(this.clusterDS.getPods(ns));\n        });\n        return this.$q.all(promises)\n        .then(pods => {\n          return _.flatten(pods).filter(n => n);\n        });\n      } else {\n        return this.clusterDS.getPods(this.namespace);\n      }\n    } else {\n      return this.clusterDS.getPodsByName(this.currentPods);\n    }\n  }\n\n  parseTagsFromPods(pods) {\n    this.currentTags = {};\n\n    _.forEach(pods, pod => {\n      _.forEach(pod.metadata.labels, (value, label) => {\n        if (!this.currentTags[label]) {\n          this.currentTags[label] = [];\n        }\n        if (!this.currentTags[label].includes(value)) {\n          this.currentTags[label].push(value);\n        }\n      });\n    });\n  }\n\n  onTagSelect() {\n    this.removeEmptyTags();\n    this.selectedPods = [];\n\n    this.getPodsByLabel()\n    .then(pods => {\n      this.currentPods = _.uniq(_.map(pods, p => { return p.metadata.name; }));\n      this.parseTagsFromPods(pods);\n      this.updateTemplateVariableWithPods();\n    });\n  }\n\n  getPodsByLabel() {\n    if (_.isArray(this.namespace)) {\n      const promises = [];\n      _.forEach(this.namespace, ns => {\n        promises.push(this.clusterDS.getPodsByLabel(ns, this.chosenTags));\n      });\n      return this.$q.all(promises)\n      .then(pods => {\n        return _.flatten(pods).filter(n => n);\n      });\n    } else {\n      return this.clusterDS.getPodsByLabel(this.namespace, this.chosenTags);\n    }\n  }\n\n  updateTemplateVariableWithPods() {\n    const variable = _.find(this.templateVariables, {'name': 'pod'});\n\n    if (this.selectedPods.length > 0) {\n      variable.current.text = this.selectedPods.join(' + ');\n      variable.current.value = this.selectedPods;\n    } else {\n      variable.current.text = _.isEmpty(this.chosenTags) ? 'All': this.currentPods.join(' + ');\n      variable.current.value = _.isEmpty(this.chosenTags) ? '$__all': this.currentPods;\n    }\n\n    this.variableSrv.updateOptions(variable).then(() => {\n      this.variableSrv.variableUpdated(variable).then(() => {\n        this.$scope.$emit('template-variable-value-updated');\n        this.$scope.$root.$broadcast('refresh');\n      });\n    });\n  }\n\n  removeEmptyTags() {\n    this.chosenTags = _.omitBy(this.chosenTags, val => { return !val;});\n  }\n\n  getCluster() {\n    const clusterName = this.$location.search()['var-cluster'];\n    return this.backendSrv.get('/api/datasources')\n    .then(result => {\n      return _.filter(result, {\"name\": clusterName})[0];\n    })\n    .then((ds) => {\n      if (!(ds.jsonData.ds)) {\n        ds.jsonData.ds = \"\";\n      }\n      return this.datasourceSrv.get(ds.name);\n    }).then(clusterDS => {\n      this.clusterDS = clusterDS;\n    });\n  }\n\n  removeTag(tag) {\n    delete this.chosenTags[tag];\n    this.getPodsByLabel()\n    .then(pods => {\n      this.currentPods = _.uniq(_.map(pods, p => { return p.metadata.name; }));\n      this.parseTagsFromPods(pods);\n      this.updateTemplateVariableWithPods();\n    });\n  }\n\n  selectPod(podName) {\n    this.chosenTags = {};\n    // this.loadTags();\n\n    if (!this.selectedPods.includes(podName)) {\n      this.selectedPods.push(podName);\n    }\n\n    this.updateTemplateVariableWithPods();\n  }\n\n  removePodTag(podName) {\n    _.remove(this.selectedPods, p => { return p === podName;});\n    this.updateTemplateVariableWithPods();\n\n    if (this.selectedPods.length === 0) {\n      this.currentPods = [];\n      this.loadTags();\n    }\n  }\n}\n\nPodNavCtrl.templateUrl = 'panels/podNav/partials/pod_nav.html';\n"]}