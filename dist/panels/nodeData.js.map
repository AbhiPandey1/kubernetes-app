{"version":3,"sources":["../../src/panels/nodeData.js"],"names":["slugify","str","slug","replace","moment","PanelCtrl","_","NodeStatsDatasource","panelDefaults","NodeDataCtrl","$scope","$injector","backendSrv","datasourceSrv","$q","$location","alertSrv","timeSrv","$window","variableSrv","defaults","panel","templateVariables","variables","nodeStatsDatasource","document","title","pageReady","cluster","clusterDS","node","isInListMode","nodes","loadCluster","search","set","cluster_id","node_name","graphiteDs","loadDatasource","then","getNodeStats","getNodes","map","healthState","getNodeHealth","updateNodeWithStats","nodeStats","getNode","health","message","forEach","status","conditions","condition","type","getHealthState","text","iconClass","stateClass","id","get","filter","result","ds","name","variable","find","current","metadata","value","variableUpdated","$emit","$broadcast","conditionStatus","lastTransitionTime","format","templateUrl"],"mappings":"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","file":"nodeData.js","sourcesContent":["import moment from 'moment';\nimport {PanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport NodeStatsDatasource from './nodeStats';\n\nconst panelDefaults = {\n};\n\nexport class NodeDataCtrl extends PanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, datasourceSrv, $q, $location, alertSrv, timeSrv, $window, variableSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n    this.alertSrv = alertSrv;\n    this.timeSrv = timeSrv;\n    this.$window = $window;\n    this.variableSrv = variableSrv;\n    this.templateVariables = this.variableSrv.variables;\n    this.nodeStatsDatasource = new NodeStatsDatasource(datasourceSrv, timeSrv);\n    document.title = 'Grafana Kubernetes App';\n\n    this.pageReady = false;\n    this.cluster = {};\n    this.clusterDS = {};\n    this.node = {};\n\n    this.isInListMode = false;\n    this.nodes = [];\n\n    this.loadCluster();\n  }\n\n  loadCluster() {\n    if (!(\"var-cluster\" in this.$location.search())) {\n      this.alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    } else {\n      const cluster_id = this.$location.search()['var-cluster'];\n      const node_name  = this.$location.search()['var-node'];\n      const graphiteDs  = this.$location.search()['var-datasource'];\n\n      this.loadDatasource(cluster_id).then(() => {\n        return this.nodeStatsDatasource.getNodeStats(cluster_id, graphiteDs);\n      }).then(nodeStats => {\n        if (node_name === 'All') {\n          this.isInListMode = true;\n          this.clusterDS.getNodes().then(nodes => {\n            this.nodes = _.map(nodes, node => {\n              node.healthState = this.getNodeHealth(node);\n              this.nodeStatsDatasource.updateNodeWithStats(node, nodeStats);\n\n              return node;\n            });\n          });\n        } else {\n          this.isInListMode = false;\n          this.clusterDS.getNode(node_name).then(node => {\n            this.node = node;\n            this.pageReady = true;\n          });\n        }\n      });\n    }\n  }\n\n  getNodeHealth(node) {\n    let health = \"unhealthy\";\n    let message = '';\n    _.forEach(node.status.conditions, condition => {\n      if (condition.type   === \"Ready\" &&\n          condition.status === \"True\") {\n        health = \"ok\";\n      } else {\n        message = condition.message;\n      }\n    });\n    return this.getHealthState(health, message);\n  }\n\n  getHealthState(health, message) {\n    switch (health) {\n      case 'ok': {\n        return {\n          text: 'OK',\n          iconClass: 'icon-gf icon-gf-online',\n          stateClass: 'alert-state-ok'\n        };\n      }\n      case 'unhealthy': {\n        return {\n          text: 'UNHEALTHY',\n          iconClass: 'icon-gf icon-gf-critical',\n          stateClass: 'alert-state-critical',\n          message: message || ''\n        };\n      }\n      case 'warning': {\n        return {\n          text: 'warning',\n          iconClass: \"icon-gf icon-gf-critical\",\n          stateClass: 'alert-state-warning',\n          message: message || ''\n        };\n      }\n    }\n  }\n\n  refresh() {\n    this.loadCluster();\n  }\n\n  loadDatasource(id) {\n    return this.backendSrv.get('api/datasources')\n      .then(result => {\n        return _.filter(result, {\"type\": \"raintank-kubernetes-datasource\", \"name\": id})[0];\n      })\n      .then(ds => {\n        this.cluster = ds;\n        return this.datasourceSrv.get(ds.name);\n      }).then(clusterDS => {\n        this.clusterDS = clusterDS;\n        return clusterDS;\n      });\n  }\n\n  goToNodeDashboard(node) {\n    const variable = _.find(this.templateVariables, {'name': 'node'});\n    variable.current.text = node === 'All' ? 'All': slugify(node.metadata.name);\n    variable.current.value = node === 'All' ? '$__all': slugify(node.metadata.name);\n\n    this.variableSrv.variableUpdated(variable).then(() => {\n      this.$scope.$emit('template-variable-value-updated');\n      this.$scope.$broadcast('refresh');\n    });\n  }\n\n  conditionStatus(condition) {\n    var status;\n    if (condition.type === \"Ready\") {\n      status = condition.status === \"True\";\n    } else {\n      status = condition.status === \"False\";\n    }\n\n    return {\n      value: status,\n      text: status ? \"Ok\" : \"Error\"\n    };\n  }\n\n  isConditionOk(condition) {\n    return this.conditionStatus(condition).value;\n  }\n\n  conditionLastTransitionTime(condition) {\n    return moment(condition.lastTransitionTime).format('YYYY-MM-DD HH:mm:ss');\n  }\n}\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(/[.]/g, \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n\nNodeDataCtrl.templateUrl = 'panels/partials/node_info.html';\n"]}