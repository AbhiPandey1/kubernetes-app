{"version":3,"sources":["../../src/panels/nodeData.js"],"names":["slugify","str","slug","replace","moment","PanelCtrl","_","panelDefaults","NodeDataCtrl","$scope","$injector","backendSrv","datasourceSrv","$q","$location","alertSrv","defaults","panel","document","title","pageReady","cluster","clusterDS","node","isInListMode","nodes","loadCluster","search","set","cluster_id","node_name","loadDatasource","then","getNodes","map","healthState","getNodeHealth","getNode","health","message","forEach","status","conditions","condition","type","getHealthState","text","iconClass","stateClass","id","get","filter","result","ds","name","path","jsonData","metadata","value","conditionStatus","lastTransitionTime","format","templateUrl"],"mappings":"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","file":"nodeData.js","sourcesContent":["import moment from 'moment';\nimport {PanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nconst panelDefaults = {\n};\n\nexport class NodeDataCtrl extends PanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, datasourceSrv, $q, $location, alertSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n    this.alertSrv = alertSrv;\n    document.title = 'Grafana Kubernetes App';\n\n    this.pageReady = false;\n    this.cluster = {};\n    this.clusterDS = {};\n    this.node = {};\n\n    this.isInListMode = false;\n    this.nodes = [];\n\n    this.loadCluster();\n  }\n\n  loadCluster() {\n    if (!(\"var-cluster\" in this.$location.search())) {\n      this.alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    } else {\n      let cluster_id = this.$location.search()['var-cluster'];\n      let node_name  = this.$location.search()['var-node'];\n\n      this.loadDatasource(cluster_id).then(() => {\n        if (node_name === 'All') {\n          this.isInListMode = true;\n          this.clusterDS.getNodes().then(nodes => {\n            this.nodes = _.map(nodes, node => {\n              node.healthState = this.getNodeHealth(node);\n              return node;\n            });\n          });\n        } else {\n          this.isInListMode = false;\n          this.clusterDS.getNode(node_name).then(node => {\n            this.node = node;\n            this.pageReady = true;\n          });\n        }\n      });\n    }\n  }\n\n  getNodeHealth(node) {\n    let health = \"unhealthy\";\n    let message = '';\n    _.forEach(node.status.conditions, condition => {\n      if (condition.type   === \"Ready\" &&\n          condition.status === \"True\") {\n        health = \"ok\";\n      } else {\n        message = condition.message;\n      }\n    });\n    return this.getHealthState(health, message);\n  }\n\n  getHealthState(health, message) {\n    switch (health) {\n      case 'ok': {\n        return {\n          text: 'OK',\n          iconClass: 'icon-gf icon-gf-online',\n          stateClass: 'alert-state-ok'\n        };\n      }\n      case 'unhealthy': {\n        return {\n          text: 'UNHEALTHY',\n          iconClass: 'icon-gf icon-gf-critical',\n          stateClass: 'alert-state-critical',\n          message: message || ''\n        };\n      }\n      case 'warning': {\n        return {\n          text: 'warning',\n          iconClass: \"icon-gf icon-gf-critical\",\n          stateClass: 'alert-state-warning',\n          message: message || ''\n        };\n      }\n    }\n  }\n\n  refresh() {\n    this.loadCluster();\n  }\n\n  loadDatasource(id) {\n    return this.backendSrv.get('api/datasources')\n      .then(result => {\n        return _.filter(result, {\"type\": \"raintank-kubernetes-datasource\", \"name\": id})[0];\n      })\n      .then(ds => {\n        this.cluster = ds;\n        return this.datasourceSrv.get(ds.name);\n      }).then(clusterDS => {\n        this.clusterDS = clusterDS;\n        return clusterDS;\n      });\n  }\n\n  goToNodeDashboard(node) {\n    this.$location.path(\"dashboard/db/kubernetes-node\")\n      .search({\n        \"var-datasource\": this.cluster.jsonData.ds,\n        \"var-cluster\": this.cluster.name,\n        \"var-node\": slugify(node.metadata.name)\n      });\n  }\n\n  conditionStatus(condition) {\n    var status;\n    if (condition.type === \"Ready\") {\n      status = condition.status === \"True\";\n    } else {\n      status = condition.status === \"False\";\n    }\n\n    return {\n      value: status,\n      text: status ? \"Ok\" : \"Error\"\n    };\n  }\n\n  isConditionOk(condition) {\n    return this.conditionStatus(condition).value;\n  }\n\n  conditionLastTransitionTime(condition) {\n    return moment(condition.lastTransitionTime).format('YYYY-MM-DD HH:mm:ss');\n  }\n}\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(/[.]/g, \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n\nNodeDataCtrl.templateUrl = 'panels/partials/node_info.html';\n"]}